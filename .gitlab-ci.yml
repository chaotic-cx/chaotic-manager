---
stages: [checks, update, build]
variables:
  GIT_AUTHOR_EMAIL: ci@garudalinux.org
  GIT_AUTHOR_NAME: Gitlab CI
  GIT_STRATEGY: clone
  REPO_URL: $CI_SERVER_PROTOCOL://gitlab-ci-token:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
check-lint:
  # Check all files for common anti-patterns and issues
  stage: checks
  image: nixpkgs/nix-flakes:latest
  inherit:
    variables: false
  script:
    - nix flake check --all-systems || true
    - nix run nixpkgs#commitizen -- check --message "$CI_COMMIT_MESSAGE"
  rules:
    - if: $UPDATE_BUILDER != "1"
check-pr-commitizen:
  # Check the current commit message for compliance with commitizen
  stage: checks
  image: nixpkgs/nix-flakes:latest
  inherit:
    variables: false
  script:
    - nix run nixpkgs#commitizen -- check --message "$CI_COMMIT_MESSAGE"
  rules:
    - if: $UPDATE_BUILDER != "1"
build-builder:
  # Used to deploy a new base Docker image for building purposes,
  # this one runs once per day via pipeline schedules
  stage: build
  when: always
  image: docker:28-cli
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE/builder:latest" ./builder-container
    - docker push "$CI_REGISTRY_IMAGE/builder:latest"
  tags: [dind]
  rules:
    - changes: [builder-container/*]
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $UPDATE_BUILDER == "1"
build-manager:
  stage: build
  when: always
  image: docker:28-cli
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE/manager:latest" -f Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE/manager:latest"
  tags: [dind]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $UPDATE_BUILDER != "1"
